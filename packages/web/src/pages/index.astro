---
import { BotDatabase, type TextCommand } from "abbott-database"

import HtmlLayout from "../layouts/main.astro"

const botDatabase = new BotDatabase()
const dbCommands = await botDatabase.loadTextCommands()
const commands: TextCommand[] = dbCommands.map((command) => {
  return {
    name: command.name,
    response: command.response,
    updated_at: command.updated_at,
  }
})
---

<HtmlLayout pageTitle={"Adam Learns command search"}>
  <command-table data-commands={JSON.stringify(commands)}>
    <main class="flex min-h-screen w-full justify-center bg-blue-50/10 px-4">
      <div class="w-full max-w-2xl">
        <div>
          <h1 class="mt-16 text-center text-3xl font-bold text-gray-800">
            Abbott Commands
          </h1>

          <div>
            <label
                for="js-query-input"
                class="mt-4 block text-center text-gray-500"
            >
              Search commands and responses
            </label>

            <input
                type="search"
                name="command"
                id="js-query-input"
                class="mt-4 h-16 w-full px-4 py-2 rounded font-mono text-lg shadow outline-cyan-700"
                placeholder="Search commands or responses"
                required
                autofocus
            />
          </div>
        </div>

        <div class="mt-12">
          <div id="js-results"></div>
        </div>
      </div>
    </main>
  </command-table>
</HtmlLayout>
<script>
  import Fuse from "fuse.js"
  import linkifyHtml from "linkify-html"
  import type { TextCommand } from "abbott-database"
  import { safeHtml } from "common-tags"

  class CommandTable extends HTMLElement {
    input: HTMLInputElement
    commands: TextCommand[]
    results: HTMLDivElement
    fuse: Fuse<TextCommand>

    constructor() {
      super()

      // Query and initialize the elements
      const input = this.querySelector<HTMLInputElement>("#js-query-input")
      if (input === null) {
        throw new Error("Missing input element.")
      }

      const results = this.querySelector<HTMLDivElement>("#js-results")
      if (results === null) {
        throw new Error("Missing results element.")
      }

      this.input = input
      this.results = results

      // Initialize the commands
      if (this.dataset.commands === undefined) {
        throw new Error("Missing commands attribute.")
      }

      this.commands = JSON.parse(this.dataset.commands)
      this.commands.forEach((command) => {
        command.updated_at = new Date(command.updated_at)
      })

      // Light the fuse (for fuzzy search)
      this.fuse = new Fuse(this.commands, {
        keys: ["name", "response"],
        includeScore: true,
      })

      // Register the event listeners
      this.input.addEventListener("input", this.onInputChanged)

      // Launch
      this.makeDefaultResults()
      this.readInitialQueryParams()
    }

    readInitialQueryParams = () => {
      const urlParams = new URLSearchParams(window.location.search)
      const commandQuery = urlParams.get("query")
      if (commandQuery) {
        this.input.value = commandQuery
        this.setCommandQuery(commandQuery)
      }
    }

    renderCommandHtml(command: TextCommand): string {
      const linkClassName = [
        "transition-all duration-75",
        "underline decoration-2",
        "text-gray-600 decoration-blue-600",
        "hover:text-gray-500 hover:decoration-teal-500",
        "active:text-gray-600 active:decoration-blue-600",
      ].join(" ")

      return `
<div class="w-full">
  <h2 class="mb-1 font-mono font-bold text-xl text-gray-800">
    ${command.name}
  </h2>

  <p class="mb-4 text-xs text-gray-400">
    ${command.updated_at.toLocaleDateString()}
  </p>
  
  <div class="mb-2 text-gray-600 max-w-[35em]">
    ${linkifyHtml(safeHtml`${command.response}`, { className: linkClassName })}
  </div>

  <hr />
</div>
`
    }

    renderResultsHtml(commands: TextCommand[]): string {
      const commandsHtml = commands.map(this.renderCommandHtml).join("")

      return `
<div class="flex flex-col gap-4">
  ${commandsHtml}
</div>
`
    }

    makeResults(commands: TextCommand[]): void {
      this.results.innerHTML = this.renderResultsHtml(commands)
    }

    makeDefaultResults = () => {
      const sortedByName = this.commands.sort((a, b) => {
        return a.name.localeCompare(b.name)
      })

      this.makeResults(sortedByName)
    }

    setCommandQuery = (query: string): void => {
      if (query.trim() === "") {
        history.replaceState({}, "", location.pathname)
        this.makeDefaultResults()
        return
      }
      history.replaceState({}, "", "?query=" + query)

      const fuse = new Fuse(this.commands, {
        keys: ["name", "response"],
      })
      const results = fuse.search(query)

      this.makeResults(results.map((r) => r.item))
    }

    onInputChanged = () => {
      this.setCommandQuery(this.input.value)
    }
  }

  customElements.define("command-table", CommandTable)
</script>
