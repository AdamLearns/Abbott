---
import { BotDatabase, type TextCommand } from "abbott-database"

import HtmlLayout from "../layouts/main.astro"

const botDatabase = new BotDatabase()
const dbCommands = await botDatabase.loadTextCommands()
const commands: TextCommand[] = dbCommands.map((command) => {
  return {
    name: command.name,
    response: command.response,
    updated_at: command.updated_at,
  }
})
---

<HtmlLayout pageTitle={"Adam Learns command search"}>
  <command-table data-commands={JSON.stringify(commands)}>
    <main class="px-4 min-h-screen w-full flex justify-center bg-blue-50/10 dark:bg-zinc-800">
      <div class="w-full max-w-2xl relative">
        <div class="w-full">
          <button
              id="js-dark-mode-toggle"
              class="absolute top-2 right-0 p-2 h-10 w-10 rounded-full text-gray-700 hover:bg-gray-100 active:bg-gray-200 dark:text-zinc-200 dark:hover:bg-zinc-700  dark:active:bg-zinc-600  motion-safe:transition"
          >
          </button>

          <h1 class="mt-16 text-center text-3xl font-bold text-gray-800 dark:text-gray-200">
            Abbott Commands
          </h1>

          <div>
            <label
                for="js-query-input"
                class="mt-4 block text-center text-gray-500 dark:text-zinc-400"
            >
              Search commands and responses
            </label>

            <input
                type="search"
                name="command"
                id="js-query-input"
                class="mt-4 h-16 w-full px-4 py-2 rounded font-mono text-lg shadow outline-none focus:outline-none focus:ring-2 focus:ring-cyan-700 dark:bg-zinc-700 dark:text-zinc-300 dark:focus:ring-zinc-400"
                placeholder="Search commands or responses"
                required
                autofocus
            />
          </div>
        </div>

        <div class="mt-12">
          <div id="js-results"></div>
        </div>

        <!-- Breathing room near the bottom -->
        <div class="h-[80vh]"></div>
      </div>
    </main>
  </command-table>
</HtmlLayout>
<script>
  import Fuse from "fuse.js"
  import linkifyHtml from "linkify-html"
  import type { TextCommand } from "abbott-database"
  import { safeHtml } from "common-tags"

  class CommandTable extends HTMLElement {
    input: HTMLInputElement
    commands: TextCommand[]
    results: HTMLDivElement
    darkModeToggle: HTMLButtonElement
    fuse: Fuse<TextCommand>

    constructor() {
      super()

      // Query and initialize the elements
      const input = this.querySelector<HTMLInputElement>("#js-query-input")
      if (input === null) {
        throw new Error("Missing input element.")
      }

      const results = this.querySelector<HTMLDivElement>("#js-results")
      if (results === null) {
        throw new Error("Missing results element.")
      }

      const darkModeToggle = this.querySelector<HTMLButtonElement>("#js-dark-mode-toggle")
      if (darkModeToggle === null) {
        throw new Error("Missing dark mode toggle element.")
      }

      this.input = input
      this.results = results
      this.darkModeToggle = darkModeToggle

      // Initialize the commands
      if (this.dataset.commands === undefined) {
        throw new Error("Missing commands attribute.")
      }

      this.commands = JSON.parse(this.dataset.commands)
      this.commands.forEach((command) => {
        command.updated_at = new Date(command.updated_at)
      })

      // Light the fuse (for fuzzy search)
      this.fuse = new Fuse(this.commands, {
        keys: ["name", "response"],
        includeScore: true,
      })

      // Register the event listeners
      this.input.addEventListener("input", this.onInputChanged)
      document.addEventListener("keydown", this.onDocumentKeyDown)
      this.darkModeToggle.addEventListener("click", this.onDarkModeToggle)

      // Launch
      this.initializeDarkModeToggle()
      this.makeDefaultResults()
      this.readInitialQueryParams()
    }

    readInitialQueryParams = () => {
      const urlParams = new URLSearchParams(window.location.search)
      const commandQuery = urlParams.get("query")
      if (commandQuery) {
        this.input.value = commandQuery
        this.setCommandQuery(commandQuery)
      }
    }

    initializeDarkModeToggle = (): void => {
      // Check local storage first
      const darkModeLocalStorage = localStorage.getItem("dark-mode")
      if (darkModeLocalStorage) {
        this.setDarkMode(darkModeLocalStorage === "true")

        return
      }

      // Defaults to dark mode, unless Light Mode is explicitly preferred
      const isLightModePreferred = window.matchMedia
        && window.matchMedia('(prefers-color-scheme: light)').matches

      this.setDarkMode(!isLightModePreferred)
    }

    setDarkMode = (isDarkMode: boolean): void => {
      // Update LocalStorage
      isDarkMode
        ? localStorage.setItem("dark-mode", "true")
        : localStorage.setItem("dark-mode", "false")

      // Update body class list
      isDarkMode
        ? document.body.classList.add("dark")
        : document.body.classList.remove("dark")

      // Update the toggle icon
      this.darkModeToggle.innerHTML = isDarkMode
        ? this.renderDarkModeIcon()
        : this.renderLightModeIcon()
    }

    renderDarkModeIcon(): string {
      // Hero Icons: Sun, Outline
      return `
<svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="currentColor"
    class="w-full h-full"
>
  <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"
  />
</svg>
`
    }

    renderLightModeIcon(): string {
      // Hero Icons: Moon, Outline
      return `
<svg
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="currentColor"
    class="w-full h-full"
>
  <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"
  />
</svg>
`
    }

    renderCommandHtml(command: TextCommand): string {
      const linkClassName = [
        "motion-safe:transition-all duration-75",
        "underline decoration-2",
        "text-gray-600 decoration-blue-600 dark:text-zinc-300",
        "hover:text-gray-500 hover:decoration-teal-500",
        "active:text-gray-600 active:decoration-blue-600",
      ].join(" ")

      return `
<div class="w-full">
  <h2 class="mb-1 font-mono font-bold text-xl text-gray-800 dark:text-zinc-200" tabindex="0">
    ${command.name}
  </h2>

  <p class="mb-4 text-xs text-gray-400 dark:text-zinc-500">
    ${command.updated_at.toLocaleDateString()}
  </p>
  
  <div class="mb-2 text-gray-600 max-w-[35em] dark:text-zinc-300">
    ${linkifyHtml(safeHtml`${command.response}`, { className: linkClassName })}
  </div>

  <hr class="border-gray-200 dark:border-zinc-600" />
</div>
`
    }

    renderZeroResults(): string {
      return `
<div class="flex flex-col gap-4">
  <div>
    <p class="mb-2 text-gray-400 text-xl dark:text-zinc-500">
      No command matches that query.
    </p>
  
    <p class="text-gray-400 dark:text-zinc-500">
      Please feel free to ask about this on the next stream or at any time via Discord.
    </p>
  </p>
</div>
`
    }

    renderResultsHtml(commands: TextCommand[]): string {
      if (commands.length === 0) {
        return this.renderZeroResults()
      }

      const commandsHtml = commands.map(this.renderCommandHtml).join("")

      return `
<div>
  <div class="mb-4">
    <p class="text-gray-500 dark:text-zinc-400">
      Found: <span class="ml-2 text-lg text-gray-600 font-bold dark:text-zinc-300">${commands.length}</span>
    </p>
  </div>

  <div class="flex flex-col gap-4">
    ${commandsHtml}
  </div>
</div>
`
    }

    makeResults(commands: TextCommand[]): void {
      this.results.innerHTML = this.renderResultsHtml(commands)
    }

    makeDefaultResults = () => {
      const sortedByName = this.commands.sort((a, b) => {
        return a.name.localeCompare(b.name)
      })

      this.makeResults(sortedByName)
    }

    setCommandQuery = (query: string): void => {
      if (query.trim() === "") {
        history.replaceState({}, "", location.pathname)
        this.makeDefaultResults()
        return
      }
      history.replaceState({}, "", "?query=" + query)

      const fuse = new Fuse(this.commands, {
        keys: ["name", "response"],
      })
      const results = fuse.search(query)

      this.makeResults(results.map((r) => r.item))
    }

    onInputChanged = () => {
      this.setCommandQuery(this.input.value)
    }

    onDocumentKeyDown = (event: KeyboardEvent): void => {
      const isSlash = event.key === "/"
      const isInputAlreadyInFocus = document.activeElement === this.input
      if (!isSlash || isInputAlreadyInFocus) {
        return
      }

      this.input.focus()
      event.preventDefault()
    }

    onDarkModeToggle = (): void => {
      const isDarkMode = document.body.classList.contains("dark")

      this.setDarkMode(!isDarkMode)
    }
  }

  customElements.define("command-table", CommandTable)
</script>
